import { useCallback, useRef, useState } from 'react';

export const useAudio = () => {
  const audioRef = useRef<HTMLAudioElement>(null);
  const [isSpeaking, setIsSpeaking] = useState(false);

  // Web Speech API –¥–ª—è –æ–∑–≤—É—á–∫–∏
  const speak = useCallback((text: string, priority = false) => {
    if ('speechSynthesis' in window) {
      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–∑–≤—É—á–∫—É –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (priority) {
        window.speechSynthesis.cancel();
      }
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 1.1;
      utterance.pitch = 1.0;
      utterance.volume = 0.8;
      
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => {
        setIsSpeaking(false);
        console.log('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º console.log:', text);
      };
      
      window.speechSynthesis.speak(utterance);
    } else {
      console.log('–û–ó–í–£–ß–ö–ê:', text);
      // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      const toast = document.createElement('div');
      toast.textContent = `üîä ${text}`;
      toast.className = 'fixed top-4 right-4 bg-primary text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-fade-in';
      document.body.appendChild(toast);
      setTimeout(() => {
        document.body.removeChild(toast);
      }, 3000);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  const playAudioFile = useCallback(async (audioType: 'cell' | 'discount' | 'camera' | 'rate', cellNumber?: number) => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ localStorage
      let audioPath = '';
      let storageKey = '';
      
      switch (audioType) {
        case 'cell':
          storageKey = `audio_cells_${cellNumber || 1}`;
          audioPath = `/audio/cells/${cellNumber || 1}.mp3`;
          break;
        case 'discount':
          storageKey = 'audio_discount';
          audioPath = '/audio/discount.mp3';
          break;
        case 'camera':
          storageKey = 'audio_camera';
          audioPath = '/audio/camera.mp3';
          break;
        case 'rate':
          storageKey = 'audio_rate';
          audioPath = '/audio/rate.mp3';
          break;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const uploadedFile = localStorage.getItem(storageKey);
      if (uploadedFile) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        audioPath = uploadedFile;
        console.log(`üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è ${audioType}`);
      } else {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª –¥–ª—è ${audioType} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∑–≤—É—á–∫—É"`);
        return;
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª
      if (audioRef.current) {
        audioRef.current.src = audioPath;
        audioRef.current.oncanplaythrough = () => {
          if (audioRef.current) {
            setIsSpeaking(true);
            audioRef.current.play().catch(() => {
              setIsSpeaking(false);
              console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ ${audioPath}. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∑–≤—É—á–∫—É"`);
            });
          }
        };
        audioRef.current.onended = () => setIsSpeaking(false);
        audioRef.current.onerror = () => {
          setIsSpeaking(false);
          console.warn(`–ê—É–¥–∏–æ—Ñ–∞–π–ª ${audioPath} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∑–≤—É—á–∫—É"`);
        };
        audioRef.current.load();
      } else {
        console.warn('AudioRef –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
      console.warn('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∑–≤—É—á–∫—É"');
    }
  }, [speak]);

  return {
    audioRef,
    isSpeaking,
    speak,
    playAudioFile
  };
};