// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å Mail.ru Cloud

// –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
const AUDIO_FILES_URLS = {
  discount: 'https://cloud.mail.ru/public/bsFp/vkbT876fD/discount.mp3',
  camera: 'https://cloud.mail.ru/public/bsFp/vkbT876fD/camera.mp3', 
  rate: 'https://cloud.mail.ru/public/bsFp/vkbT876fD/rate.mp3',
  // –Ø—á–µ–π–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
} as const;

export async function downloadAndInstallAudio(
  onProgress?: (loaded: number, total: number) => void,
  onFileComplete?: (fileName: string, type: string) => void
): Promise<{success: number; failed: number; errors: string[]}> {
  const results = {
    success: 0,
    failed: 0,
    errors: [] as string[]
  };

  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    const basicFiles = Object.entries(AUDIO_FILES_URLS);
    
    for (const [type, url] of basicFiles) {
      try {
        console.log(`üì• –ó–∞–≥—Ä—É–∂–∞—é ${type}...`);
        
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const arrayBuffer = await response.arrayBuffer();
        const base64 = arrayBufferToBase64(arrayBuffer);
        const dataUrl = `data:audio/mpeg;base64,${base64}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem(`audio_${type}`, dataUrl);
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${type}`);
        results.success++;
        onFileComplete?.(type, type);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${type}:`, error);
        results.failed++;
        results.errors.push(`${type}: ${error}`);
      }
    }

    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —è—á–µ–π–∫–∏ (1-20 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª—ã —è—á–µ–µ–∫...');
    
    for (let i = 1; i <= 20; i++) {
      try {
        const cellUrl = `https://cloud.mail.ru/public/bsFp/vkbT876fD/cells/${i}.mp3`;
        const response = await fetch(cellUrl);
        
        if (response.ok) {
          const arrayBuffer = await response.arrayBuffer();
          const base64 = arrayBufferToBase64(arrayBuffer);
          const dataUrl = `data:audio/mpeg;base64,${base64}`;
          
          localStorage.setItem(`audio_cells_${i}`, dataUrl);
          console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${i} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
          results.success++;
          onFileComplete?.(`${i}.mp3`, 'cell');
        }
      } catch (error) {
        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —è—á–µ–µ–∫, –æ–Ω–∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        console.log(`‚è≠Ô∏è –Ø—á–µ–π–∫–∞ ${i} –ø—Ä–æ–ø—É—â–µ–Ω–∞`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      onProgress?.(i, 20);
    }

    console.log(`üéâ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${results.success}, –û—à–∏–±–æ–∫: ${results.failed}`);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏:', error);
    results.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
  }

  return results;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ArrayBuffer –≤ Base64
function arrayBufferToBase64(buffer: ArrayBuffer): string {
  const bytes = new Uint8Array(buffer);
  let binary = '';
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
export async function checkAudioFilesAvailability(): Promise<{
  available: string[];
  unavailable: string[];
}> {
  const available: string[] = [];
  const unavailable: string[] = [];

  for (const [type, url] of Object.entries(AUDIO_FILES_URLS)) {
    try {
      const response = await fetch(url, { method: 'HEAD' });
      if (response.ok) {
        available.push(type);
      } else {
        unavailable.push(type);
      }
    } catch {
      unavailable.push(type);
    }
  }

  return { available, unavailable };
}