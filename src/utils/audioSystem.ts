// –°–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏ –¥–ª—è WB –ü–í–ó —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ –æ–±–ª–∞–∫–∞ Mail.ru
export class WBAudioSystem {
  private mailRuPublicUrl = 'https://cloud.mail.ru/public/WMiM/n1UTJ5fwe';
  private audioCache = new Map<string, HTMLAudioElement>();
  private isEnabled = true;
  private isInitialized = false;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑ Mail.ru Cloud API
  private async getDirectFileUrl(filename: string): Promise<string> {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª
      const apiUrl = `https://cloud.mail.ru/api/v2/file/download?public_key=WMiM%2Fn1UTJ5fwe&filename=${encodeURIComponent(filename)}`;
      
      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        },
        mode: 'cors'
      });

      if (response.ok) {
        const data = await response.json();
        return data.url || `${this.mailRuPublicUrl}/${filename}`;
      }
      
      // Fallback –Ω–∞ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
      return `${this.mailRuPublicUrl}/${filename}`;
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è ${filename}:`, error);
      return `${this.mailRuPublicUrl}/${filename}`;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  async initialize() {
    if (this.isInitialized) return;

    console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏ WB –ü–í–ó...');
    
    const criticalFiles = [
      '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫.mp3',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π.mp3', 
      '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.mp3'
    ];

    for (const filename of criticalFiles) {
      try {
        const directUrl = await this.getDirectFileUrl(filename);
        const audio = new Audio();
        audio.preload = 'metadata';
        audio.crossOrigin = 'anonymous';
        audio.src = directUrl;
        
        this.audioCache.set(filename, audio);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: ${filename}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å: ${filename}`, error);
      }
    }

    this.isInitialized = true;
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏ (–∏–∑ –ø–∞–ø–∫–∏ –Ø—á–µ–π–∫–∏)
  async playCellAudio(cellNumber?: string): Promise<void> {
    if (!this.isEnabled) return;
    
    await this.initialize();
    
    try {
      const cell = cellNumber || this.getRandomCell();
      console.log(`üîä –û–∑–≤—É—á–∏–≤–∞—é —è—á–µ–π–∫—É: ${cell}`);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —è—á–µ–µ–∫
      const possiblePaths = [
        `–Ø—á–µ–π–∫–∏/${cell}.mp3`,
        `—è—á–µ–π–∫–∏/${cell}.mp3`,
        `Cells/${cell}.mp3`,
        `cells/${cell}.mp3`,
        `${cell}.mp3`
      ];

      for (const path of possiblePaths) {
        try {
          const audioUrl = await this.getDirectFileUrl(path);
          const audio = new Audio(audioUrl);
          audio.volume = 0.9;
          audio.crossOrigin = 'anonymous';
          
          await this.playAudioPromise(audio);
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–∑–≤—É—á–µ–Ω–∞ —è—á–µ–π–∫–∞: ${cell}`);
          return;
        } catch (err) {
          console.warn(`–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${path} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err);
          continue;
        }
      }

      // –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
      console.log(`üó£Ô∏è –§–∞–π–ª —è—á–µ–π–∫–∏ ${cell} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏`);
      await this.speakText(`–Ø—á–µ–π–∫–∞ ${cell}`);

    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏:', error);
      await this.speakText(`–Ø—á–µ–π–∫–∞ ${cellNumber || this.getRandomCell()}`);
    }
  }

  // –û–∑–≤—É—á–∫–∞ —Å–∫–∏–¥–æ–∫
  async playDiscountAudio(): Promise<void> {
    if (!this.isEnabled) return;
    
    await this.initialize();

    try {
      const filename = '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫.mp3';
      
      // –ü—Ä–æ–±—É–µ–º –∏–∑ –∫–µ—à–∞
      let audio = this.audioCache.get(filename);
      
      if (!audio) {
        const audioUrl = await this.getDirectFileUrl(filename);
        audio = new Audio(audioUrl);
        audio.volume = 0.9;
        audio.crossOrigin = 'anonymous';
      }

      await this.playAudioPromise(audio);
      console.log('‚úÖ –û–∑–≤—É—á–µ–Ω—ã —Å–∫–∏–¥–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
      
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ —Å–∫–∏–¥–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—é —Å–∏–Ω—Ç–µ–∑:', error);
      await this.speakText('–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫');
    }
  }

  // –û–∑–≤—É—á–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π
  async playCheckCameraAudio(): Promise<void> {
    if (!this.isEnabled) return;
    
    await this.initialize();

    try {
      const filename = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π.mp3';
      
      let audio = this.audioCache.get(filename);
      
      if (!audio) {
        const audioUrl = await this.getDirectFileUrl(filename);
        audio = new Audio(audioUrl);
        audio.volume = 0.9;
        audio.crossOrigin = 'anonymous';
      }

      await this.playAudioPromise(audio);
      console.log('‚úÖ –û–∑–≤—É—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
      
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–º–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É—é —Å–∏–Ω—Ç–µ–∑:', error);
      await this.speakText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π');
    }
  }

  // –û–∑–≤—É—á–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ü–í–ó
  async playRateUsAudio(): Promise<void> {
    if (!this.isEnabled) return;
    
    await this.initialize();

    try {
      const filename = '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.mp3';
      
      let audio = this.audioCache.get(filename);
      
      if (!audio) {
        const audioUrl = await this.getDirectFileUrl(filename);
        audio = new Audio(audioUrl);
        audio.volume = 0.9;
        audio.crossOrigin = 'anonymous';
      }

      await this.playAudioPromise(audio);
      console.log('‚úÖ –û–∑–≤—É—á–µ–Ω–∞ –ø—Ä–æ—Å—å–±–∞ –æ—Ü–µ–Ω–∏—Ç—å –ü–í–ó –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
      
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –æ—Ü–µ–Ω–∫–∏ –ü–í–ó, –∏—Å–ø–æ–ª—å–∑—É—é —Å–∏–Ω—Ç–µ–∑:', error);
      await this.speakText('–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏
  async playSuccessSound(): Promise<void> {
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞ –≤ –æ–±–ª–∞–∫–µ
      const successFiles = ['success.mp3', 'ok.mp3', 'ready.mp3'];
      
      for (const filename of successFiles) {
        try {
          const audioUrl = await this.getDirectFileUrl(filename);
          const audio = new Audio(audioUrl);
          audio.volume = 0.5;
          await this.playAudioPromise(audio);
          return;
        } catch (err) {
          continue;
        }
      }
      
      // Fallback - –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
      this.playSystemBeep(800, 200, 0.1);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞');
    }
  }

  async playErrorSound(): Promise<void> {
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–≤—É–∫ –æ—à–∏–±–∫–∏ –≤ –æ–±–ª–∞–∫–µ
      const errorFiles = ['error.mp3', 'wrong.mp3', 'fail.mp3'];
      
      for (const filename of errorFiles) {
        try {
          const audioUrl = await this.getDirectFileUrl(filename);
          const audio = new Audio(audioUrl);
          audio.volume = 0.5;
          await this.playAudioPromise(audio);
          return;
        } catch (err) {
          continue;
        }
      }
      
      // Fallback - –Ω–∏–∑–∫–∏–π –∑–≤—É–∫ –æ—à–∏–±–∫–∏
      this.playSystemBeep(300, 500, 0.2);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –æ—à–∏–±–∫–∏');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async playAudioPromise(audio: HTMLAudioElement): Promise<void> {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('Audio timeout after 10 seconds'));
      }, 10000);

      const cleanup = () => {
        clearTimeout(timeout);
        audio.onended = null;
        audio.onerror = null;
        audio.oncanplay = null;
      };

      audio.onended = () => {
        cleanup();
        resolve();
      };

      audio.onerror = (error) => {
        cleanup();
        reject(new Error(`Audio playback failed: ${error}`));
      };

      // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      audio.play().catch((error) => {
        cleanup();
        reject(new Error(`Play method failed: ${error}`));
      });
    });
  }

  private async speakText(text: string): Promise<void> {
    if ('speechSynthesis' in window) {
      return new Promise((resolve) => {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'ru-RU';
        utterance.rate = 0.85;
        utterance.volume = 0.8;
        utterance.pitch = 1.0;
        
        utterance.onend = () => resolve();
        utterance.onerror = () => resolve();
        
        speechSynthesis.speak(utterance);
        
        // Timeout fallback
        setTimeout(() => resolve(), 5000);
      });
    }
  }

  private playSystemBeep(frequency: number, duration: number, volume: number) {
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);

      oscillator.frequency.value = frequency;
      oscillator.type = 'sine';
      gainNode.gain.value = volume;

      oscillator.start();
      oscillator.stop(audioContext.currentTime + duration / 1000);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫');
    }
  }

  private getRandomCell(): string {
    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const letter = letters[Math.floor(Math.random() * letters.length)];
    const number = Math.floor(Math.random() * 99) + 1;
    return `${letter}${number}`;
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
  enable() {
    this.isEnabled = true;
    console.log('üîä –û–∑–≤—É—á–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞');
  }

  disable() {
    this.isEnabled = false;
    console.log('üîá –û–∑–≤—É—á–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  }

  isAudioEnabled(): boolean {
    return this.isEnabled;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
  getStatus(): object {
    return {
      enabled: this.isEnabled,
      initialized: this.isInitialized,
      cachedFiles: Array.from(this.audioCache.keys()),
      cloudUrl: this.mailRuPublicUrl
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏
export const audioSystem = new WBAudioSystem();