// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏ –¥–ª—è WB –ü–í–ó —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
export class WBAudioSystem {
  private mailRuPublicUrl = 'https://cloud.mail.ru/public/WMiM/n1UTJ5fwe';
  private audioCache = new Map<string, HTMLAudioElement>();
  private isEnabled = true;
  private isInitialized = false;
  private availableFiles = new Set<string>();

  // –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ –æ–±–ª–∞–∫–∞ Mail.ru
  private audioFiles = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (–∏–∑–≤–µ—Å—Ç–Ω—ã–µ)
    discount: '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫.mp3',
    camera: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π.mp3',
    rate: '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.mp3',
    
    // –§–∞–π–ª—ã –≤—Ö–æ–¥–∞ –∏ –¥–æ—Å—Ç—É–ø–∞  
    welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥.mp3',
    scanPhone: '–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é.mp3',
    accessGranted: '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ.mp3',
    scanError: '–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.mp3',
    enterCode: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è.mp3',
    codeCorrect: '–ö–æ–¥ –≤–µ—Ä–Ω—ã–π.mp3',
    codeIncorrect: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.mp3',
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —è—á–µ–π–∫–∞–º–∏
    findCell: '–ù–∞–π–¥–∏—Ç–µ –≤–∞—à—É —è—á–µ–π–∫—É –Ω–æ–º–µ—Ä.mp3',
    cellOpen: '–Ø—á–µ–π–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä.mp3',
    closeCell: '–ó–∞–∫—Ä–æ–π—Ç–µ —è—á–µ–π–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è.mp3',
    timeLimit: '–í—Ä–µ–º—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.mp3',
    cellBusy: '–Ø—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞.mp3',
    cellError: '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏.mp3',
    
    // –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
    fittingFree: '–ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è —Å–≤–æ–±–æ–¥–Ω–∞.mp3',
    fittingTime: '–í—Ä–µ–º—è –ø—Ä–∏–º–µ—Ä–∫–∏ 5 –º–∏–Ω—É—Ç.mp3',
    finishFitting: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∫—É.mp3',
    fittingBusy: '–ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è –∑–∞–Ω—è—Ç–∞.mp3',
    
    // –í–æ–∑–≤—Ä–∞—Ç—ã
    returnStaff: '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.mp3',
    returnAccepted: '–¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç –∫ –≤–æ–∑–≤—Ä–∞—Ç—É.mp3',
    packReturn: '–£–ø–∞–∫—É–π—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.mp3',
    returnComplete: '–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω.mp3',
    returnDenied: '–í –≤–æ–∑–≤—Ä–∞—Ç–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.mp3',
    
    // –û—á–µ—Ä–µ–¥–∏
    waitTurn: '–û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏.mp3',
    nextCustomer: '–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.mp3',
    makeRoom: '–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö.mp3',
    queueFull: '–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞.mp3',
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    techIssues: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É.mp3',
    systemDown: '–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.mp3',
    systemRestart: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã.mp3',
    maintenance: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.mp3',
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø–æ—Ä—è–¥–æ–∫
    dontForget: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∞—à–∏ –≤–µ—â–∏.mp3',
    videoSurveillance: '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø–æ–¥ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º.mp3',
    maintainOrder: '–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫.mp3',
    noSmoking: '–ö—É—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.mp3',
    maskRequired: '–ù–∞–¥–µ–Ω—å—Ç–µ –º–∞—Å–∫—É.mp3',
    
    // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    closing: '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.mp3',
    tenMinutes: '–î–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç.mp3',
    fiveMinutes: '–î–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç.mp3',
    closed: '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∑–∞–∫—Ä—ã—Ç.mp3',
    opening: '–û—Ç–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.mp3',
    twentyFourSeven: '–†–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.mp3',
    
    // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    thankYou: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.mp3',
    goodDay: '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è.mp3',
    comeAgain: '–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ.mp3',
    goodMorning: '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.mp3',
    goodEvening: '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä.mp3',
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    attention: '–í–Ω–∏–º–∞–Ω–∏–µ.mp3',
    urgent: '–°—Ä–æ—á–Ω–æ.mp3',
    important: '–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.mp3',
    newOrder: '–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.mp3',
    orderReady: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ.mp3',
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏
    success: 'success.mp3',
    error: 'error.mp3',
    notification: 'notification.mp3',
    beep: 'beep.mp3',
    chime: 'chime.mp3',
    alert: 'alert.mp3'
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑ Mail.ru Cloud API
  private async getDirectFileUrl(filename: string): Promise<string> {
    try {
      const apiUrl = `https://cloud.mail.ru/api/v2/file/download?public_key=WMiM%2Fn1UTJ5fwe&filename=${encodeURIComponent(filename)}`;
      
      const response = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        },
        mode: 'cors'
      });

      if (response.ok) {
        const data = await response.json();
        return data.url || `${this.mailRuPublicUrl}/${filename}`;
      }
      
      return `${this.mailRuPublicUrl}/${filename}`;
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è ${filename}:`, error);
      return `${this.mailRuPublicUrl}/${filename}`;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async initialize() {
    if (this.isInitialized) return;

    console.log('üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏ WB –ü–í–ó...');
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    const criticalFiles = [
      this.audioFiles.discount,
      this.audioFiles.camera, 
      this.audioFiles.rate,
      this.audioFiles.welcome,
      this.audioFiles.accessGranted
    ];

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    for (const filename of criticalFiles) {
      try {
        const directUrl = await this.getDirectFileUrl(filename);
        const audio = new Audio();
        audio.preload = 'metadata';
        audio.crossOrigin = 'anonymous';
        audio.src = directUrl;
        
        this.audioCache.set(filename, audio);
        this.availableFiles.add(filename);
        console.log(`‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${filename}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å: ${filename}`, error);
      }
    }

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    this.discoverAvailableFiles();

    this.isInitialized = true;
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  private async discoverAvailableFiles() {
    console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...');
    
    const allFiles = Object.values(this.audioFiles);
    let foundCount = 0;

    for (const filename of allFiles) {
      if (this.availableFiles.has(filename)) continue; // –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      
      try {
        const directUrl = await this.getDirectFileUrl(filename);
        const response = await fetch(directUrl, { 
          method: 'HEAD',
          mode: 'cors'
        });
        
        if (response.ok && response.headers.get('content-type')?.includes('audio')) {
          this.availableFiles.add(filename);
          foundCount++;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${filename}`);
        }
      } catch (error) {
        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${foundCount}`);
    console.log(`üìà –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: ${this.availableFiles.size} —Ñ–∞–π–ª–æ–≤`);
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ª—é–±–æ–≥–æ –∞—É–¥–∏–æ
  private async playAudioByKey(key: string, fallbackText?: string): Promise<void> {
    if (!this.isEnabled) return;
    
    await this.initialize();

    const filename = this.audioFiles[key as keyof typeof this.audioFiles];
    if (!filename) {
      console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –∞—É–¥–∏–æ: ${key}`);
      return;
    }

    try {
      // –ü—Ä–æ–±—É–µ–º –∏–∑ –∫–µ—à–∞
      let audio = this.audioCache.get(filename);
      
      if (!audio && this.availableFiles.has(filename)) {
        const audioUrl = await this.getDirectFileUrl(filename);
        audio = new Audio(audioUrl);
        audio.volume = 0.9;
        audio.crossOrigin = 'anonymous';
        this.audioCache.set(filename, audio);
      }

      if (audio) {
        await this.playAudioPromise(audio);
        console.log(`‚úÖ –û–∑–≤—É—á–µ–Ω–æ: ${filename}`);
        return;
      }

      // Fallback –Ω–∞ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
      if (fallbackText) {
        console.log(`üó£Ô∏è –§–∞–π–ª ${filename} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å–∏–Ω—Ç–µ–∑`);
        await this.speakText(fallbackText);
      }

    } catch (error) {
      console.warn(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${filename}:`, error);
      if (fallbackText) {
        await this.speakText(fallbackText);
      }
    }
  }

  // –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –û–ó–í–£–ß–ö–ò

  // –Ø—á–µ–π–∫–∏
  async playCellAudio(cellNumber?: string): Promise<void> {
    const cell = cellNumber || this.getRandomCell();
    
    // –ü—Ä–æ–±—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –Ø—á–µ–π–∫–∏
    const possiblePaths = [
      `–Ø—á–µ–π–∫–∏/${cell}.mp3`,
      `—è—á–µ–π–∫–∏/${cell}.mp3`,
      `Cells/${cell}.mp3`,
      `cells/${cell}.mp3`,
      `${cell}.mp3`
    ];

    for (const path of possiblePaths) {
      try {
        const audioUrl = await this.getDirectFileUrl(path);
        const audio = new Audio(audioUrl);
        audio.volume = 0.9;
        audio.crossOrigin = 'anonymous';
        
        await this.playAudioPromise(audio);
        console.log(`‚úÖ –û–∑–≤—É—á–µ–Ω–∞ —è—á–µ–π–∫–∞: ${cell}`);
        return;
      } catch (err) {
        continue;
      }
    }

    // Fallback
    await this.speakText(`–Ø—á–µ–π–∫–∞ ${cell}`);
  }

  // –°–∫–∏–¥–∫–∏
  async playDiscountAudio(): Promise<void> {
    await this.playAudioByKey('discount', '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π
  async playCheckCameraAudio(): Promise<void> {
    await this.playAudioByKey('camera', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π');
  }

  // –û—Ü–µ–Ω–∫–∞ –ü–í–ó
  async playRateUsAudio(): Promise<void> {
    await this.playAudioByKey('rate', '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
  }

  // –ù–û–í–´–ï –ú–ï–¢–û–î–´ –û–ó–í–£–ß–ö–ò

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—Ö–æ–¥
  async playWelcomeAudio(): Promise<void> {
    await this.playAudioByKey('welcome', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥');
  }

  async playScanPhoneAudio(): Promise<void> {
    await this.playAudioByKey('scanPhone', '–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—é');
  }

  async playAccessGrantedAudio(): Promise<void> {
    await this.playAudioByKey('accessGranted', '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ');
  }

  async playScanErrorAudio(): Promise<void> {
    await this.playAudioByKey('scanError', '–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ');
  }

  // –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —è—á–µ–π–∫–∞–º–∏
  async playFindCellAudio(): Promise<void> {
    await this.playAudioByKey('findCell', '–ù–∞–π–¥–∏—Ç–µ –≤–∞—à—É —è—á–µ–π–∫—É –Ω–æ–º–µ—Ä');
  }

  async playCellOpenAudio(): Promise<void> {
    await this.playAudioByKey('cellOpen', '–Ø—á–µ–π–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –∑–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä');
  }

  async playCloseCellAudio(): Promise<void> {
    await this.playAudioByKey('closeCell', '–ó–∞–∫—Ä–æ–π—Ç–µ —è—á–µ–π–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è');
  }

  async playTimeLimitAudio(): Promise<void> {
    await this.playAudioByKey('timeLimit', '–í—Ä–µ–º—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ');
  }

  // –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
  async playFittingFreeAudio(): Promise<void> {
    await this.playAudioByKey('fittingFree', '–ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è —Å–≤–æ–±–æ–¥–Ω–∞');
  }

  async playFittingTimeAudio(): Promise<void> {
    await this.playAudioByKey('fittingTime', '–í—Ä–µ–º—è –ø—Ä–∏–º–µ—Ä–∫–∏ 5 –º–∏–Ω—É—Ç');
  }

  async playFinishFittingAudio(): Promise<void> {
    await this.playAudioByKey('finishFitting', '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∫—É');
  }

  // –í–æ–∑–≤—Ä–∞—Ç—ã
  async playReturnStaffAudio(): Promise<void> {
    await this.playAudioByKey('returnStaff', '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É');
  }

  async playReturnAcceptedAudio(): Promise<void> {
    await this.playAudioByKey('returnAccepted', '–¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç –∫ –≤–æ–∑–≤—Ä–∞—Ç—É');
  }

  async playPackReturnAudio(): Promise<void> {
    await this.playAudioByKey('packReturn', '–£–ø–∞–∫—É–π—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞');
  }

  // –û—á–µ—Ä–µ–¥–∏
  async playWaitTurnAudio(): Promise<void> {
    await this.playAudioByKey('waitTurn', '–û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏');
  }

  async playNextCustomerAudio(): Promise<void> {
    await this.playAudioByKey('nextCustomer', '–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å');
  }

  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  async playTechIssuesAudio(): Promise<void> {
    await this.playAudioByKey('techIssues', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É');
  }

  async playSystemDownAudio(): Promise<void> {
    await this.playAudioByKey('systemDown', '–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  }

  // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
  async playClosingAudio(): Promise<void> {
    await this.playAudioByKey('closing', '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è');
  }

  async playTenMinutesAudio(): Promise<void> {
    await this.playAudioByKey('tenMinutes', '–î–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç');
  }

  // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
  async playThankYouAudio(): Promise<void> {
    await this.playAudioByKey('thankYou', '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É');
  }

  async playGoodDayAudio(): Promise<void> {
    await this.playAudioByKey('goodDay', '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è');
  }

  // –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async playAttentionAudio(): Promise<void> {
    await this.playAudioByKey('attention', '–í–Ω–∏–º–∞–Ω–∏–µ');
  }

  async playImportantAudio(): Promise<void> {
    await this.playAudioByKey('important', '–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
  }

  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏
  async playSuccessSound(): Promise<void> {
    await this.playAudioByKey('success') || this.playSystemBeep(800, 200, 0.1);
  }

  async playErrorSound(): Promise<void> {
    await this.playAudioByKey('error') || this.playSystemBeep(300, 500, 0.2);
  }

  async playNotificationSound(): Promise<void> {
    await this.playAudioByKey('notification') || this.playSystemBeep(600, 150, 0.15);
  }

  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´

  private async playAudioPromise(audio: HTMLAudioElement): Promise<void> {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('Audio timeout after 10 seconds'));
      }, 10000);

      const cleanup = () => {
        clearTimeout(timeout);
        audio.onended = null;
        audio.onerror = null;
      };

      audio.onended = () => {
        cleanup();
        resolve();
      };

      audio.onerror = () => {
        cleanup();
        reject(new Error('Audio playback failed'));
      };

      audio.play().catch(reject);
    });
  }

  private async speakText(text: string): Promise<void> {
    if ('speechSynthesis' in window) {
      return new Promise((resolve) => {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'ru-RU';
        utterance.rate = 0.85;
        utterance.volume = 0.8;
        utterance.pitch = 1.0;
        
        utterance.onend = () => resolve();
        utterance.onerror = () => resolve();
        
        speechSynthesis.speak(utterance);
        setTimeout(() => resolve(), 5000);
      });
    }
  }

  private playSystemBeep(frequency: number, duration: number, volume: number) {
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);

      oscillator.frequency.value = frequency;
      oscillator.type = 'sine';
      gainNode.gain.value = volume;

      oscillator.start();
      oscillator.stop(audioContext.currentTime + duration / 1000);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫');
    }
  }

  private getRandomCell(): string {
    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const letter = letters[Math.floor(Math.random() * letters.length)];
    const number = Math.floor(Math.random() * 99) + 1;
    return `${letter}${number}`;
  }

  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô

  enable() {
    this.isEnabled = true;
    console.log('üîä –û–∑–≤—É—á–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞');
  }

  disable() {
    this.isEnabled = false;
    console.log('üîá –û–∑–≤—É—á–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  }

  isAudioEnabled(): boolean {
    return this.isEnabled;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
  getStatus(): object {
    return {
      enabled: this.isEnabled,
      initialized: this.isInitialized,
      cachedFiles: Array.from(this.audioCache.keys()),
      availableFiles: Array.from(this.availableFiles),
      totalFiles: Object.keys(this.audioFiles).length,
      cloudUrl: this.mailRuPublicUrl
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–∑–≤—É—á–∫–∏
  getAvailableMethods(): string[] {
    return Object.getOwnPropertyNames(Object.getPrototypeOf(this))
      .filter(name => name.startsWith('play') && typeof this[name as keyof this] === 'function')
      .sort();
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–∑–≤—É—á–∫–∏
export const audioSystem = new WBAudioSystem();