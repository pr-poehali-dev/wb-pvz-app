// –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏ –¥–ª—è WB –ü–í–ó —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
export class WBAudioSystem {
  private baseUrl = 'https://cloud.mail.ru/public/WMiM/n1UTJ5fwe';
  private audioCache = new Map<string, HTMLAudioElement>();
  private isEnabled = true;

  // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è—á–µ–π–∫–∏ (A1-Z99)
  private generateCellNumbers(): string[] {
    const cells: string[] = [];
    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    
    for (let letter of letters) {
      for (let num = 1; num <= 99; num++) {
        cells.push(`${letter}${num}`);
      }
    }
    return cells;
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∞—É–¥–∏–æ
  async preloadAudio() {
    const criticalSounds = [
      '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫.mp3',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π.mp3',
      '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.mp3'
    ];

    for (const sound of criticalSounds) {
      try {
        const audio = new Audio();
        audio.preload = 'auto';
        audio.src = `${this.baseUrl}/${sound}`;
        this.audioCache.set(sound, audio);
      } catch (error) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ: ${sound}`, error);
      }
    }
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏
  async playCellAudio(cellNumber?: string): Promise<void> {
    if (!this.isEnabled) return;

    try {
      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
      const cell = cellNumber || this.getRandomCell();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ URL –¥–ª—è —è—á–µ–µ–∫
      const possibleUrls = [
        `${this.baseUrl}/–Ø—á–µ–π–∫–∏/${cell}.mp3`,
        `${this.baseUrl}/—è—á–µ–π–∫–∏/${cell}.mp3`,
        `${this.baseUrl}/cells/${cell}.mp3`,
        `${this.baseUrl}/${cell}.mp3`
      ];

      for (const url of possibleUrls) {
        try {
          const audio = new Audio(url);
          audio.volume = 0.8;
          await this.playAudioWithFallback(audio);
          console.log(`üîä –û–∑–≤—É—á–µ–Ω–∞ —è—á–µ–π–∫–∞: ${cell}`);
          return;
        } catch (err) {
          continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL
        }
      }

      // Fallback - —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ—á—å
      await this.speakText(`–Ø—á–µ–π–∫–∞ ${cell}`);

    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —è—á–µ–π–∫–∏:', error);
      await this.speakText(`–Ø—á–µ–π–∫–∞ ${cellNumber || this.getRandomCell()}`);
    }
  }

  // –û–∑–≤—É—á–∫–∞ —Å–∫–∏–¥–æ–∫
  async playDiscountAudio(): Promise<void> {
    if (!this.isEnabled) return;

    try {
      const urls = [
        `${this.baseUrl}/–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫.mp3`,
        `${this.baseUrl}/discount.mp3`
      ];

      for (const url of urls) {
        try {
          const audio = this.audioCache.get('–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫.mp3') || new Audio(url);
          audio.volume = 0.8;
          await this.playAudioWithFallback(audio);
          console.log('üîä –û–∑–≤—É—á–µ–Ω—ã —Å–∫–∏–¥–∫–∏');
          return;
        } catch (err) {
          continue;
        }
      }

      // Fallback
      await this.speakText('–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫');

    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫:', error);
      await this.speakText('–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–ë –∫–æ—à–µ–ª–µ–∫');
    }
  }

  // –û–∑–≤—É—á–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π
  async playCheckCameraAudio(): Promise<void> {
    if (!this.isEnabled) return;

    try {
      const urls = [
        `${this.baseUrl}/–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π.mp3`,
        `${this.baseUrl}/check_camera.mp3`
      ];

      for (const url of urls) {
        try {
          const audio = this.audioCache.get('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π.mp3') || new Audio(url);
          audio.volume = 0.8;
          await this.playAudioWithFallback(audio);
          console.log('üîä –û–∑–≤—É—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π');
          return;
        } catch (err) {
          continue;
        }
      }

      // Fallback
      await this.speakText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π');

    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
      await this.speakText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π');
    }
  }

  // –û–∑–≤—É—á–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ü–í–ó
  async playRateUsAudio(): Promise<void> {
    if (!this.isEnabled) return;

    try {
      const urls = [
        `${this.baseUrl}/–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.mp3`,
        `${this.baseUrl}/rate_us.mp3`
      ];

      for (const url of urls) {
        try {
          const audio = this.audioCache.get('–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.mp3') || new Audio(url);
          audio.volume = 0.8;
          await this.playAudioWithFallback(audio);
          console.log('üîä –û–∑–≤—É—á–µ–Ω–∞ –ø—Ä–æ—Å—å–±–∞ –æ—Ü–µ–Ω–∏—Ç—å –ü–í–ó');
          return;
        } catch (err) {
          continue;
        }
      }

      // Fallback
      await this.speakText('–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');

    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
      await this.speakText('–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—É–∫–∏
  async playSuccessSound(): Promise<void> {
    try {
      const audio = new Audio();
      audio.src = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmAaBU...';
      audio.volume = 0.3;
      await this.playAudioWithFallback(audio);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞');
    }
  }

  async playErrorSound(): Promise<void> {
    try {
      const audio = new Audio();
      audio.src = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmAaBU...';
      audio.volume = 0.5;
      await this.playAudioWithFallback(audio);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –æ—à–∏–±–∫–∏');
    }
  }

  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async playAudioWithFallback(audio: HTMLAudioElement): Promise<void> {
    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('Audio timeout'));
      }, 5000);

      audio.onended = () => {
        clearTimeout(timeout);
        resolve();
      };

      audio.onerror = () => {
        clearTimeout(timeout);
        reject(new Error('Audio error'));
      };

      audio.play().catch(reject);
    });
  }

  private async speakText(text: string): Promise<void> {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.9;
      utterance.volume = 0.8;
      
      return new Promise((resolve) => {
        utterance.onend = () => resolve();
        utterance.onerror = () => resolve();
        speechSynthesis.speak(utterance);
      });
    }
  }

  private getRandomCell(): string {
    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const letter = letters[Math.floor(Math.random() * letters.length)];
    const number = Math.floor(Math.random() * 99) + 1;
    return `${letter}${number}`;
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  enable() {
    this.isEnabled = true;
  }

  disable() {
    this.isEnabled = false;
  }

  isAudioEnabled(): boolean {
    return this.isEnabled;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const audioSystem = new WBAudioSystem();