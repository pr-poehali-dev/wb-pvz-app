// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º

export interface AudioMapping {
  type: 'discount' | 'camera' | 'rate' | 'cell';
  cellNumber?: number;
}

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤
const AUDIO_PATTERNS = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
  { pattern: /discount|—Å–∫–∏–¥–∫|–∫–æ—à–µ–ª|—Ç–æ–≤–∞—Ä.*—Å–∫–∏–¥–∫/i, type: 'discount' as const },
  { pattern: /camera|–∫–∞–º–µ—Ä|–ø—Ä–æ–≤–µ—Ä—å|–ø–æ–¥.*–∫–∞–º–µ—Ä/i, type: 'camera' as const },
  { pattern: /rate|–æ—Ü–µ–Ω|–ø—Ä–∏–ª–æ–∂–µ–Ω|–ø—É–Ω–∫—Ç.*–≤—ã–¥–∞—á/i, type: 'rate' as const },
  
  // –Ø—á–µ–π–∫–∏ - —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  { pattern: /^(\d+)\./, type: 'cell' as const, extractNumber: true },
  { pattern: /—è—á–µ–π–∫.*(\d+)|cell.*(\d+)|(\d+).*—è—á–µ–π–∫/i, type: 'cell' as const, extractNumber: true },
  { pattern: /(\d+)$/, type: 'cell' as const, extractNumber: true },
] as const;

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
const KEYWORDS = {
  discount: ['—Å–∫–∏–¥–∫–∞', '—Å–∫–∏–¥–∫–∏', '–∫–æ—à–µ–ª—ë–∫', '–∫–æ—à–µ–ª–µ–∫', '—Ç–æ–≤–∞—Ä—ã', '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ', '–≤–±'],
  camera: ['–∫–∞–º–µ—Ä–∞', '–∫–∞–º–µ—Ä—É', '–∫–∞–º–µ—Ä–æ–π', '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ', '–ø—Ä–æ–≤–µ—Ä—å', '—Ç–æ–≤–∞—Ä'],
  rate: ['–æ—Ü–µ–Ω–∏—Ç–µ', '–æ—Ü–µ–Ω–∫–∞', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', '–ø—É–Ω–∫—Ç', '–≤—ã–¥–∞—á–∏', '–≤—ã–¥–∞—á–∞'],
} as const;

export function recognizeAudioFile(fileName: string): AudioMapping | null {
  const nameWithoutExt = fileName.replace(/\.(mp3|wav|ogg|m4a)$/i, '').toLowerCase();
  
  console.log(`üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ñ–∞–π–ª: ${fileName} -> ${nameWithoutExt}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  for (const { pattern, type, extractNumber } of AUDIO_PATTERNS) {
    const match = nameWithoutExt.match(pattern);
    if (match) {
      if (type === 'cell' && extractNumber) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
        const cellNumber = parseInt(match[1] || match[2] || match[3] || '0');
        if (cellNumber > 0 && cellNumber <= 999) {
          console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${fileName} -> —è—á–µ–π–∫–∞ ${cellNumber}`);
          return { type: 'cell', cellNumber };
        }
      } else {
        console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${fileName} -> ${type}`);
        return { type };
      }
    }
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  for (const [audioType, keywords] of Object.entries(KEYWORDS)) {
    if (keywords.some(keyword => nameWithoutExt.includes(keyword))) {
      console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${fileName} -> ${audioType}`);
      return { type: audioType as 'discount' | 'camera' | 'rate' };
    }
  }
  
  console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å: ${fileName}`);
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
export function categorizeAudioFiles(files: File[]): {
  recognized: Array<{ file: File; mapping: AudioMapping }>;
  unrecognized: File[];
} {
  const recognized: Array<{ file: File; mapping: AudioMapping }> = [];
  const unrecognized: File[] = [];
  
  for (const file of files) {
    if (!file.type.startsWith('audio/')) continue;
    
    const mapping = recognizeAudioFile(file.name);
    if (mapping) {
      recognized.push({ file, mapping });
    } else {
      unrecognized.push(file);
    }
  }
  
  return { recognized, unrecognized };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
export function getFunctionDisplayName(type: string, cellNumber?: number): string {
  switch (type) {
    case 'discount':
      return '–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π (–í–ë –∫–æ—à–µ–ª—ë–∫)';
    case 'camera':
      return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π';
    case 'rate':
      return '–û—Ü–µ–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏';
    case 'cell':
      return `–Ø—á–µ–π–∫–∞ –Ω–æ–º–µ—Ä ${cellNumber}`;
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è';
  }
}