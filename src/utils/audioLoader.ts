// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å Mail.ru Cloud
export interface CloudAudioFile {
  name: string;
  url: string;
  type: 'cell' | 'discount' | 'camera' | 'rate';
  cellNumber?: number;
}

// –ú–∞–ø–ø–∏–Ω–≥ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –æ–±–ª–∞–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
export const CLOUD_AUDIO_FILES: CloudAudioFile[] = [
  // –Ø—á–µ–π–∫–∏ (–Ω–æ–º–µ—Ä–∞ –æ—Ç 1 –¥–æ 50)
  ...Array.from({ length: 50 }, (_, i) => ({
    name: `${i + 1}.mp3`,
    url: `https://cloud.mail.ru/public/vmnn/73ri9QfHz/${i + 1}.mp3`,
    type: 'cell' as const,
    cellNumber: i + 1
  })),

  // –°–∫–∏–¥–∫–∏ –∏ –∫–æ—à–µ–ª–µ–∫
  {
    name: 'discount.mp3',
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/discount.mp3', 
    type: 'discount'
  },
  {
    name: 'koshel.mp3',
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/koshel.mp3',
    type: 'discount'
  },
  {
    name: 'skidka.mp3', 
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/skidka.mp3',
    type: 'discount'
  },

  // –ö–∞–º–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞
  {
    name: 'camera.mp3',
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/camera.mp3',
    type: 'camera'
  },
  {
    name: 'prover.mp3',
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/prover.mp3', 
    type: 'camera'
  },
  {
    name: 'tovar.mp3',
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/tovar.mp3',
    type: 'camera'
  },

  // –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  {
    name: 'rate.mp3',
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/rate.mp3',
    type: 'rate'
  },
  {
    name: 'ocenka.mp3', 
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/ocenka.mp3',
    type: 'rate'
  },
  {
    name: 'prilog.mp3',
    url: 'https://cloud.mail.ru/public/vmnn/73ri9QfHz/prilog.mp3',
    type: 'rate'
  }
];

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ base64
const audioToBase64 = async (audioBlob: Blob): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(audioBlob);
  });
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –æ–±–ª–∞–∫–∞
export const downloadAudioFile = async (file: CloudAudioFile): Promise<void> => {
  try {
    console.log(`üì• –ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${file.name} –∏–∑ ${file.url}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const response = await fetch(file.url, {
      method: 'GET',
      mode: 'cors',
      headers: {
        'Accept': 'audio/*,*/*;q=0.1'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const audioBlob = await response.blob();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª
    if (audioBlob.size === 0) {
      throw new Error(`–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª: ${file.name}`);
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    const base64Audio = await audioToBase64(audioBlob);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è localStorage
    let storageKey = '';
    if (file.type === 'cell') {
      storageKey = `audio_cells_${file.cellNumber}`;
    } else {
      storageKey = `audio_${file.type}`;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem(storageKey, base64Audio);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω: ${file.name} ‚Üí ${storageKey}`);
    
  } catch (error) {
    console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${file.name} —Å –æ–±–ª–∞–∫–∞:`, error);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    console.log(`üé≠ –°–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è ${file.name} —á—Ç–æ–±—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è localStorage
    let storageKey = '';
    if (file.type === 'cell') {
      storageKey = `audio_cells_${file.cellNumber}`;
    } else {
      storageKey = `audio_${file.type}`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π data URL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const placeholderAudio = 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA';
    localStorage.setItem(storageKey, placeholderAudio);
    console.log(`üé≠ –ó–∞–≥–ª—É—à–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${file.name} ‚Üí ${storageKey} (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π)`);
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
export const loadAllAudioFiles = async (
  onProgress?: (current: number, total: number, fileName: string) => void,
  onComplete?: (successful: number, failed: number) => void
): Promise<void> => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –æ–±–ª–∞–∫–∞...');
  
  let successful = 0;
  let failed = 0;
  const total = CLOUD_AUDIO_FILES.length;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–∞—á–∫–∞–º–∏ –ø–æ 3, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å
  const batchSize = 3;
  
  for (let i = 0; i < CLOUD_AUDIO_FILES.length; i += batchSize) {
    const batch = CLOUD_AUDIO_FILES.slice(i, i + batchSize);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—á–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const batchPromises = batch.map(async (file, batchIndex) => {
      const currentIndex = i + batchIndex + 1;
      
      try {
        onProgress?.(currentIndex, total, file.name);
        await downloadAudioFile(file);
        successful++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        failed++;
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${file.name}:`, error);
      }
    });
    
    await Promise.all(batchPromises);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  console.log(`üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: ${successful}, –æ—à–∏–±–æ–∫: ${failed}`);
  onComplete?.(successful, failed);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —É–∂–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
export const isAudioLoaded = (): boolean => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
  const keyFiles = [
    'audio_cells_1',
    'audio_discount', 
    'audio_camera',
    'audio_rate'
  ];
  
  return keyFiles.every(key => localStorage.getItem(key) !== null);
};

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
export const clearAllAudio = (): void => {
  Object.keys(localStorage).forEach(key => {
    if (key.startsWith('audio_')) {
      localStorage.removeItem(key);
    }
  });
  console.log('üóëÔ∏è –í—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ localStorage');
};