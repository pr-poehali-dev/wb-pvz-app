import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { audioSystem } from '@/utils/audioSystem';

const AudioTester: React.FC = () => {
  const [isPlaying, setIsPlaying] = useState<string | null>(null);
  const [systemStatus, setSystemStatus] = useState<any>({});
  const [activeCategory, setActiveCategory] = useState<string>('main');

  const testAudio = async (type: string, label: string, method: string, params?: any[]) => {
    setIsPlaying(type);
    try {
      // @ts-ignore - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
      if (params) {
        await audioSystem[method](...params);
      } else {
        await audioSystem[method]();
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${label}:`, error);
    } finally {
      setIsPlaying(null);
    }
  };

  const updateStatus = () => {
    setSystemStatus(audioSystem.getStatus());
  };

  const toggleAudio = () => {
    if (audioSystem.isAudioEnabled()) {
      audioSystem.disable();
    } else {
      audioSystem.enable();
    }
    updateStatus();
  };

  React.useEffect(() => {
    updateStatus();
  }, []);

  // –ì—Ä—É–ø–ø—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const audioCategories = {
    main: {
      title: '–û—Å–Ω–æ–≤–Ω—ã–µ',
      icon: 'Volume2',
      items: [
        { key: 'discount', label: '–°–∫–∏–¥–∫–∏', method: 'playDiscountAudio' },
        { key: 'camera', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞', method: 'playCheckCameraAudio' },
        { key: 'rate', label: '–û—Ü–µ–Ω–∫–∞', method: 'playRateUsAudio' },
        { key: 'cell', label: '–Ø—á–µ–π–∫–∞ A15', method: 'playCellAudio', params: ['A15'] }
      ]
    },
    entry: {
      title: '–í—Ö–æ–¥',
      icon: 'DoorOpen',
      items: [
        { key: 'welcome', label: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', method: 'playWelcomeAudio' },
        { key: 'scanPhone', label: '–°–∫–∞–Ω–µ—Ä', method: 'playScanPhoneAudio' },
        { key: 'accessGranted', label: '–î–æ—Å—Ç—É–ø', method: 'playAccessGrantedAudio' },
        { key: 'scanError', label: '–û—à–∏–±–∫–∞', method: 'playScanErrorAudio' }
      ]
    },
    cells: {
      title: '–Ø—á–µ–π–∫–∏',
      icon: 'Archive',
      items: [
        { key: 'findCell', label: '–ù–∞–π—Ç–∏ —è—á–µ–π–∫—É', method: 'playFindCellAudio' },
        { key: 'cellOpen', label: '–û—Ç–∫—Ä—ã—Ç–∞', method: 'playCellOpenAudio' },
        { key: 'closeCell', label: '–ó–∞–∫—Ä—ã—Ç—å', method: 'playCloseCellAudio' },
        { key: 'timeLimit', label: '–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏', method: 'playTimeLimitAudio' }
      ]
    },
    fitting: {
      title: '–ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è',
      icon: 'Shirt',
      items: [
        { key: 'fittingFree', label: '–°–≤–æ–±–æ–¥–Ω–∞', method: 'playFittingFreeAudio' },
        { key: 'fittingTime', label: '5 –º–∏–Ω—É—Ç', method: 'playFittingTimeAudio' },
        { key: 'finishFitting', label: '–ó–∞–≤–µ—Ä—à–∏—Ç—å', method: 'playFinishFittingAudio' }
      ]
    },
    returns: {
      title: '–í–æ–∑–≤—Ä–∞—Ç—ã',
      icon: 'RotateCcw',
      items: [
        { key: 'returnStaff', label: '–ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É', method: 'playReturnStaffAudio' },
        { key: 'returnAccepted', label: '–ü—Ä–∏–Ω—è—Ç', method: 'playReturnAcceptedAudio' },
        { key: 'packReturn', label: '–£–ø–∞–∫–æ–≤–∞—Ç—å', method: 'playPackReturnAudio' }
      ]
    },
    queue: {
      title: '–û—á–µ—Ä–µ–¥—å',
      icon: 'Users',
      items: [
        { key: 'waitTurn', label: '–û–∂–∏–¥–∞–Ω–∏–µ', method: 'playWaitTurnAudio' },
        { key: 'nextCustomer', label: '–°–ª–µ–¥—É—é—â–∏–π', method: 'playNextCustomerAudio' }
      ]
    },
    tech: {
      title: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      icon: 'Settings',
      items: [
        { key: 'techIssues', label: '–ù–µ–ø–æ–ª–∞–¥–∫–∏', method: 'playTechIssuesAudio' },
        { key: 'systemDown', label: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞', method: 'playSystemDownAudio' }
      ]
    },
    time: {
      title: '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã',
      icon: 'Clock',
      items: [
        { key: 'closing', label: '–ó–∞–∫—Ä—ã—Ç–∏–µ', method: 'playClosingAudio' },
        { key: 'tenMinutes', label: '10 –º–∏–Ω—É—Ç', method: 'playTenMinutesAudio' }
      ]
    },
    thanks: {
      title: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏',
      icon: 'Heart',
      items: [
        { key: 'thankYou', label: '–°–ø–∞—Å–∏–±–æ', method: 'playThankYouAudio' },
        { key: 'goodDay', label: '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è', method: 'playGoodDayAudio' }
      ]
    },
    system: {
      title: '–°–∏—Å—Ç–µ–º–Ω—ã–µ',
      icon: 'Bell',
      items: [
        { key: 'attention', label: '–í–Ω–∏–º–∞–Ω–∏–µ', method: 'playAttentionAudio' },
        { key: 'important', label: '–í–∞–∂–Ω–æ–µ', method: 'playImportantAudio' },
        { key: 'success', label: '–£—Å–ø–µ—Ö', method: 'playSuccessSound' },
        { key: 'error', label: '–û—à–∏–±–∫–∞', method: 'playErrorSound' },
        { key: 'notification', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', method: 'playNotificationSound' }
      ]
    }
  };

  const currentCategory = audioCategories[activeCategory as keyof typeof audioCategories];

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Icon name="Volume2" size={20} />
            –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–∑–≤—É—á–∫–∏ WB –ü–í–ó
          </div>
          <Button 
            onClick={toggleAudio}
            size="sm"
            variant={systemStatus.enabled ? "default" : "secondary"}
          >
            {systemStatus.enabled ? "–í–∫–ª—é—á–µ–Ω–æ" : "–û—Ç–∫–ª—é—á–µ–Ω–æ"}
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <div className="font-medium text-gray-700">–°—Ç–∞—Ç—É—Å</div>
              <div className={systemStatus.enabled ? "text-green-600" : "text-red-600"}>
                {systemStatus.enabled ? "–ê–∫—Ç–∏–≤–Ω–∞" : "–û—Ç–∫–ª—é—á–µ–Ω–∞"}
              </div>
            </div>
            <div>
              <div className="font-medium text-gray-700">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</div>
              <div className={systemStatus.initialized ? "text-green-600" : "text-orange-600"}>
                {systemStatus.initialized ? "–î–∞" : "–ù–µ—Ç"}
              </div>
            </div>
            <div>
              <div className="font-medium text-gray-700">–í –∫–µ—à–µ</div>
              <div className="text-blue-600">{systemStatus.cachedFiles?.length || 0}</div>
            </div>
            <div>
              <div className="font-medium text-gray-700">–î–æ—Å—Ç—É–ø–Ω–æ</div>
              <div className="text-green-600">{systemStatus.availableFiles?.length || 0}</div>
            </div>
          </div>
        </div>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <div className="flex flex-wrap gap-2">
          {Object.entries(audioCategories).map(([key, category]) => (
            <Button
              key={key}
              size="sm"
              variant={activeCategory === key ? "default" : "outline"}
              onClick={() => setActiveCategory(key)}
              className="flex items-center gap-1"
            >
              <Icon name={category.icon as any} size={14} />
              {category.title}
            </Button>
          ))}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className="space-y-3">
          <h3 className="font-medium text-lg flex items-center gap-2">
            <Icon name={currentCategory.icon as any} size={18} />
            {currentCategory.title}
          </h3>
          
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
            {currentCategory.items.map((item) => (
              <Button
                key={item.key}
                onClick={() => testAudio(item.key, item.label, item.method, item.params)}
                disabled={isPlaying === item.key}
                variant="outline"
                size="sm"
                className="flex items-center gap-2 h-auto py-2 px-3 text-left justify-start"
              >
                {isPlaying === item.key ? (
                  <Icon name="Loader2" size={14} className="animate-spin flex-shrink-0" />
                ) : (
                  <Icon name="Play" size={14} className="flex-shrink-0" />
                )}
                <span className="text-xs truncate">{item.label}</span>
              </Button>
            ))}
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö */}
        <div className="text-xs text-gray-500 bg-blue-50 p-3 rounded space-y-2">
          <div className="font-medium">üí° –û —Å–∏—Å—Ç–µ–º–µ –æ–∑–≤—É—á–∫–∏:</div>
          <ul className="space-y-1">
            <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ–±–ª–∞–∫–µ Mail.ru</li>
            <li>‚Ä¢ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏</li>
            <li>‚Ä¢ –ö–µ—à–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</li>
            <li>‚Ä¢ –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤ –æ–∑–≤—É—á–∫–∏: {systemStatus.totalFiles || '–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'}</li>
          </ul>
          
          {systemStatus.availableFiles?.length > 0 && (
            <details className="mt-2">
              <summary className="cursor-pointer font-medium text-gray-700">
                üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã ({systemStatus.availableFiles.length})
              </summary>
              <div className="mt-1 max-h-32 overflow-y-auto text-xs">
                {systemStatus.availableFiles.map((file: string, idx: number) => (
                  <div key={idx} className="truncate">‚Ä¢ {file}</div>
                ))}
              </div>
            </details>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
        <Button 
          onClick={updateStatus}
          variant="outline" 
          size="sm"
          className="w-full"
        >
          <Icon name="RefreshCw" size={16} className="mr-2" />
          –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        </Button>
      </CardContent>
    </Card>
  );
};

export default AudioTester;