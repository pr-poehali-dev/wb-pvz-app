import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { useAudio } from '@/hooks/useAudio';

interface AppTesterProps {
  onClose: () => void;
}

const AppTester = ({ onClose }: AppTesterProps) => {
  const { playAudioFile } = useAudio();
  const [testResults, setTestResults] = useState<Record<string, 'success' | 'error' | 'pending'>>({});
  const [isRunningTests, setIsRunningTests] = useState(false);

  const tests = [
    {
      id: 'audio_cell',
      name: '–û–∑–≤—É—á–∫–∞ —è—á–µ–π–∫–∏',
      description: '–¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏',
      action: () => playAudioFile('cell', 15)
    },
    {
      id: 'audio_discount',
      name: '–û–∑–≤—É—á–∫–∞ —Å–∫–∏–¥–æ–∫',
      description: '–¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ –ø—Ä–æ —Å–∫–∏–¥–∫–∏',
      action: () => playAudioFile('discount')
    },
    {
      id: 'audio_camera',
      name: '–û–∑–≤—É—á–∫–∞ –∫–∞–º–µ—Ä—ã',
      description: '–¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ –ø—Ä–æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π',
      action: () => playAudioFile('camera')
    },
    {
      id: 'audio_rate',
      name: '–û–∑–≤—É—á–∫–∞ –æ—Ü–µ–Ω–∫–∏',
      description: '–¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏ –ø—Ä–æ –æ—Ü–µ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      action: () => playAudioFile('rate')
    }
  ];

  const runSingleTest = async (test: typeof tests[0]) => {
    setTestResults(prev => ({ ...prev, [test.id]: 'pending' }));
    console.log(`üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç: ${test.name}`);
    
    try {
      await test.action();
      setTestResults(prev => ({ ...prev, [test.id]: 'success' }));
      console.log(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: ${test.name}`);
    } catch (error) {
      setTestResults(prev => ({ ...prev, [test.id]: 'error' }));
      console.error(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${test.name}`, error);
    }
  };

  const runAllTests = async () => {
    setIsRunningTests(true);
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    for (const test of tests) {
      await runSingleTest(test);
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    setIsRunningTests(false);
    console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  };

  const getTestStatusIcon = (testId: string) => {
    const status = testResults[testId];
    switch (status) {
      case 'success':
        return <Icon name="CheckCircle" size={16} className="text-green-600" />;
      case 'error':
        return <Icon name="XCircle" size={16} className="text-red-600" />;
      case 'pending':
        return <Icon name="Loader2" size={16} className="text-blue-600 animate-spin" />;
      default:
        return <Icon name="Circle" size={16} className="text-gray-400" />;
    }
  };

  const getTestStatusColor = (testId: string) => {
    const status = testResults[testId];
    switch (status) {
      case 'success':
        return 'border-green-200 bg-green-50';
      case 'error':
        return 'border-red-200 bg-red-50';
      case 'pending':
        return 'border-blue-200 bg-blue-50';
      default:
        return 'border-gray-200 bg-gray-50';
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ localStorage
  const checkAudioFiles = () => {
    const audioFiles = {
      '–Ø—á–µ–π–∫–∏': Array.from({ length: 50 }, (_, i) => `audio_cells_${i + 1}`),
      '–°–∫–∏–¥–∫–∏': ['audio_discount'],
      '–ö–∞–º–µ—Ä–∞': ['audio_camera'],
      '–û—Ü–µ–Ω–∫–∞': ['audio_rate']
    };

    return Object.entries(audioFiles).map(([category, keys]) => ({
      category,
      loaded: keys.filter(key => localStorage.getItem(key)).length,
      total: keys.length
    }));
  };

  const audioFilesStatus = checkAudioFiles();

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl max-h-[90vh] overflow-auto">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Icon name="TestTube" size={20} />
            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          </CardTitle>
          <Button variant="ghost" onClick={onClose}>
            <Icon name="X" size={16} />
          </Button>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ */}
          <div className="space-y-3">
            <h3 className="font-medium flex items-center gap-2">
              <Icon name="FileAudio" size={16} />
              –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
            </h3>
            <div className="grid grid-cols-2 gap-3">
              {audioFilesStatus.map(({ category, loaded, total }) => (
                <div 
                  key={category}
                  className={`p-3 rounded-lg border ${
                    loaded > 0 ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'
                  }`}
                >
                  <div className="font-medium text-sm">{category}</div>
                  <div className="text-xs text-gray-600">
                    {loaded} / {total} –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                  </div>
                  {loaded > 0 && (
                    <Icon name="CheckCircle" size={12} className="text-green-600 mt-1" />
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <h3 className="font-medium flex items-center gap-2">
                <Icon name="Play" size={16} />
                –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
              </h3>
              <Button
                onClick={runAllTests}
                disabled={isRunningTests}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                {isRunningTests ? (
                  <>
                    <Icon name="Loader2" size={16} className="animate-spin mr-2" />
                    –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç—ã...
                  </>
                ) : (
                  <>
                    <Icon name="PlayCircle" size={16} className="mr-2" />
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
                  </>
                )}
              </Button>
            </div>

            <div className="space-y-2">
              {tests.map((test) => (
                <div 
                  key={test.id}
                  className={`p-3 rounded-lg border ${getTestStatusColor(test.id)}`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {getTestStatusIcon(test.id)}
                      <div>
                        <div className="font-medium text-sm">{test.name}</div>
                        <div className="text-xs text-gray-600">{test.description}</div>
                      </div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => runSingleTest(test)}
                      disabled={testResults[test.id] === 'pending'}
                    >
                      <Icon name="Play" size={12} className="mr-1" />
                      –¢–µ—Å—Ç
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
            <h3 className="font-medium mb-2 flex items-center gap-2">
              <Icon name="Info" size={16} className="text-blue-600" />
              –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            </h3>
            <div className="text-sm text-blue-800 space-y-2">
              <p>1. <strong>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã</strong> —á–µ—Ä–µ–∑ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∑–≤—É—á–∫—É"</p>
              <p>2. <strong>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã</strong> - –æ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ–∑–≤—É—á–∫–∏</p>
              <p>3. <strong>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å</strong> - —Ç–∞–º –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏</p>
              <p>4. <strong>–ó–µ–ª—ë–Ω—ã–µ —Ç–µ—Å—Ç—ã</strong> –æ–∑–Ω–∞—á–∞—é—Ç —É—Å–ø–µ—à–Ω—É—é —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–π</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AppTester;