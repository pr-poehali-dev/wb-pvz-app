import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import { audioSystem } from '@/utils/audioSystem';

interface OrderItem {
  id: string;
  name: string;
  price: number;
  barcode: string;
  weight?: number;
  dimensions?: string;
}

interface Order {
  id: string;
  customerPhone: string;
  customerName: string;
  cellNumber: string;
  items: OrderItem[];
  status: 'pending' | 'ready' | 'processing' | 'completed';
  total: number;
  hasDiscount: boolean;
  hasWallet: boolean;
  paymentType: 'card' | 'cash' | 'online';
  deliveryDate: string;
}

interface WBOrderProcessorProps {
  order: Order;
  onComplete: () => void;
  onCancel: () => void;
}

const WBOrderProcessor: React.FC<WBOrderProcessorProps> = ({ order, onComplete, onCancel }) => {
  const [currentStep, setCurrentStep] = useState<'found' | 'retrieving' | 'scanning' | 'checking' | 'payment' | 'completed'>('found');
  const [scannedItems, setScannedItems] = useState<Set<string>>(new Set());
  const [isProcessing, setIsProcessing] = useState(false);
  const [paymentAmount, setPaymentAmount] = useState(0);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã
  useEffect(() => {
    audioSystem.preloadAudio();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ –æ–∑–≤—É—á–∫–∏ —è—á–µ–π–∫–∏
  useEffect(() => {
    if (currentStep === 'found') {
      const processOrder = async () => {
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —è—á–µ–π–∫–∏
        await audioSystem.playFindCellAudio(); // "–ù–∞–π–¥–∏—Ç–µ –≤–∞—à—É —è—á–µ–π–∫—É –Ω–æ–º–µ—Ä"
        setTimeout(async () => {
          await audioSystem.playCellAudio(order.cellNumber); // "A15"
          
          setTimeout(async () => {
            await audioSystem.playCellOpenAudio(); // "–Ø—á–µ–π–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –∑–∞–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä"
            
            // –ó–∞—Ç–µ–º –æ–∑–≤—É—á–∏–≤–∞–µ–º —Å–∫–∏–¥–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            setTimeout(async () => {
              if (order.hasDiscount) {
                await audioSystem.playDiscountAudio();
              }
              
              // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
              setCurrentStep('retrieving');
            }, 2000);
          }, 1500);
        }, 1000);
      };
      
      processOrder();
    }
  }, [currentStep, order]);

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
  const handleProductRetrieved = async () => {
    setIsProcessing(true);
    setCurrentStep('scanning');

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
    setTimeout(async () => {
      // –û–∑–≤—É—á–∏–≤–∞–µ–º "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π"
      await audioSystem.playCheckCameraAudio();
      setCurrentStep('checking');
      setIsProcessing(false);
    }, 1500);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
  const handleItemCheck = async (itemId: string) => {
    const newScannedItems = new Set(scannedItems);
    newScannedItems.add(itemId);
    setScannedItems(newScannedItems);

    await audioSystem.playSuccessSound();

    // –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
    if (newScannedItems.size === order.items.length) {
      setTimeout(() => {
        setCurrentStep('payment');
        setPaymentAmount(order.total);
      }, 1000);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
  const handlePayment = async (method: 'card' | 'cash' | 'online') => {
    setIsProcessing(true);

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
    setTimeout(async () => {
      setCurrentStep('completed');
      
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∑–≤—É—á–µ–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      await audioSystem.playSuccessSound(); // –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
      
      setTimeout(async () => {
        await audioSystem.playThankYouAudio(); // "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É"
        
        setTimeout(async () => {
          await audioSystem.playRateUsAudio(); // "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
          
          setTimeout(async () => {
            await audioSystem.playGoodDayAudio(); // "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è"
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
              onComplete();
            }, 2000);
          }, 3000);
        }, 1500);
      }, 1000);
      
      setIsProcessing(false);
    }, 2000);
  };

  // –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
  const handleCancel = async () => {
    await audioSystem.playErrorSound();
    onCancel();
  };

  const renderStep = () => {
    switch (currentStep) {
      case 'found':
        return (
          <div className="text-center">
            <div className="bg-green-100 border border-green-300 rounded-lg p-6 mb-6">
              <Icon name="CheckCircle" size={48} className="text-green-600 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-green-800 mb-2">–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!</h3>
              <div className="space-y-2">
                <p className="text-green-700">
                  –ö–ª–∏–µ–Ω—Ç: <span className="font-medium">{order.customerName}</span>
                </p>
                <p className="text-green-700">
                  –¢–µ–ª–µ—Ñ–æ–Ω: <span className="font-medium">***{order.customerPhone}</span>
                </p>
                <p className="text-green-700">
                  –Ø—á–µ–π–∫–∞: <span className="font-bold text-3xl text-blue-600">{order.cellNumber}</span>
                </p>
                <div className="flex justify-center gap-2 mt-3">
                  {order.hasDiscount && (
                    <Badge className="bg-purple-100 text-purple-800">
                      üí∞ –°–∫–∏–¥–∫–∏
                    </Badge>
                  )}
                  {order.hasWallet && (
                    <Badge className="bg-blue-100 text-blue-800">
                      üëõ WB –ö–æ—à–µ–ª–µ–∫
                    </Badge>
                  )}
                </div>
              </div>
            </div>
            <div className="animate-pulse">
              <p className="text-gray-600">üîä –û–∑–≤—É—á–∏–≤–∞—é –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏...</p>
            </div>
          </div>
        );

      case 'retrieving':
        return (
          <div className="text-center">
            <div className="bg-blue-100 border border-blue-300 rounded-lg p-6 mb-6">
              <Icon name="Package" size={48} className="text-blue-600 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-blue-800 mb-4">–ü—Ä–∏–Ω–µ—Å–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —è—á–µ–π–∫–∏ {order.cellNumber}</h3>
              
              <div className="space-y-3 mb-6">
                <div className="text-sm font-medium text-blue-700 mb-3">–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</div>
                {order.items.map((item) => (
                  <div key={item.id} className="flex items-center justify-between bg-white p-3 rounded border">
                    <div className="text-left">
                      <div className="font-medium text-sm">{item.name}</div>
                      <div className="text-xs text-gray-500">–®—Ç—Ä–∏—Ö–∫–æ–¥: {item.barcode}</div>
                    </div>
                    <div className="font-bold text-blue-600">{item.price.toLocaleString()} ‚ÇΩ</div>
                  </div>
                ))}
                <div className="pt-3 border-t">
                  <div className="flex justify-between items-center font-bold text-lg">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span className="text-blue-600">{order.total.toLocaleString()} ‚ÇΩ</span>
                  </div>
                </div>
              </div>

              <Button 
                onClick={handleProductRetrieved}
                disabled={isProcessing}
                className="bg-blue-600 hover:bg-blue-700 text-white w-full"
              >
                {isProcessing ? '–°–∫–∞–Ω–∏—Ä—É—é —Ç–æ–≤–∞—Ä...' : '–¢–æ–≤–∞—Ä –ø—Ä–∏–Ω–µ—Å—ë–Ω, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å'}
              </Button>
            </div>
          </div>
        );

      case 'scanning':
        return (
          <div className="text-center">
            <div className="bg-yellow-100 border border-yellow-300 rounded-lg p-6">
              <Icon name="Scan" size={48} className="text-yellow-600 mx-auto mb-4 animate-pulse" />
              <h3 className="text-xl font-bold text-yellow-800 mb-2">–°–∫–∞–Ω–∏—Ä—É—é —Ç–æ–≤–∞—Ä...</h3>
              <div className="animate-pulse">
                <div className="w-32 h-32 bg-yellow-200 rounded-lg mx-auto mb-4 flex items-center justify-center">
                  <Icon name="Loader2" size={32} className="animate-spin text-yellow-600" />
                </div>
                <p className="text-yellow-700">–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–∞–∑—É</p>
              </div>
            </div>
          </div>
        );

      case 'checking':
        return (
          <div className="text-center">
            <div className="bg-orange-100 border border-orange-300 rounded-lg p-6 mb-6">
              <Icon name="Camera" size={48} className="text-orange-600 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-orange-800 mb-4">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π</h3>
              
              <div className="space-y-3 mb-6">
                {order.items.map((item) => (
                  <div key={item.id} className="flex items-center justify-between bg-white p-4 rounded border">
                    <div className="text-left flex-1">
                      <div className="font-medium">{item.name}</div>
                      <div className="text-sm text-gray-500">{item.price.toLocaleString()} ‚ÇΩ</div>
                    </div>
                    <Button
                      onClick={() => handleItemCheck(item.id)}
                      disabled={scannedItems.has(item.id)}
                      className={`ml-4 ${
                        scannedItems.has(item.id)
                          ? 'bg-green-600 text-white'
                          : 'bg-orange-600 hover:bg-orange-700 text-white'
                      }`}
                    >
                      {scannedItems.has(item.id) ? (
                        <>
                          <Icon name="CheckCircle" size={16} className="mr-1" />
                          –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ
                        </>
                      ) : (
                        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'
                      )}
                    </Button>
                  </div>
                ))}
              </div>

              <div className="text-sm text-orange-700">
                –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {scannedItems.size} –∏–∑ {order.items.length} —Ç–æ–≤–∞—Ä–æ–≤
              </div>
            </div>
          </div>
        );

      case 'payment':
        return (
          <div className="text-center">
            <div className="bg-green-100 border border-green-300 rounded-lg p-6 mb-6">
              <Icon name="CreditCard" size={48} className="text-green-600 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-green-800 mb-4">–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</h3>
              
              <div className="text-3xl font-bold text-green-600 mb-6">
                {paymentAmount.toLocaleString()} ‚ÇΩ
              </div>

              <div className="grid grid-cols-1 gap-3 mb-6">
                <Button 
                  onClick={() => handlePayment('card')}
                  disabled={isProcessing}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                >
                  <Icon name="CreditCard" size={16} className="mr-2" />
                  –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
                </Button>
                <Button 
                  onClick={() => handlePayment('cash')}
                  disabled={isProcessing}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  <Icon name="Banknote" size={16} className="mr-2" />
                  –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏
                </Button>
                <Button 
                  onClick={() => handlePayment('online')}
                  disabled={isProcessing}
                  className="bg-purple-600 hover:bg-purple-700 text-white"
                >
                  <Icon name="Smartphone" size={16} className="mr-2" />
                  –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞
                </Button>
              </div>

              {isProcessing && (
                <div className="text-green-600 animate-pulse">
                  <Icon name="Loader2" size={24} className="animate-spin mx-auto mb-2" />
                  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–ª–∞—Ç–µ–∂...
                </div>
              )}
            </div>
          </div>
        );

      case 'completed':
        return (
          <div className="text-center">
            <div className="bg-purple-100 border border-purple-300 rounded-lg p-6">
              <Icon name="Star" size={48} className="text-purple-600 mx-auto mb-4" />
              <h3 className="text-xl font-bold text-purple-800 mb-2">
                –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!
              </h3>
              <p className="text-purple-700 mb-4">
                –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ Wildberries!
              </p>
              <div className="animate-pulse">
                <p className="text-sm text-purple-600">
                  üîä –ü—Ä–æ—Å–∏–º –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏...
                </p>
              </div>
              
              <div className="mt-6 p-4 bg-white rounded border">
                <div className="text-sm font-medium mb-2">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</div>
                <div className="text-xs text-gray-600 space-y-1">
                  <div>‚Ññ –∑–∞–∫–∞–∑–∞: {order.id}</div>
                  <div>–Ø—á–µ–π–∫–∞: {order.cellNumber}</div>
                  <div>–°—É–º–º–∞: {order.total.toLocaleString()} ‚ÇΩ</div>
                  <div>–í—Ä–µ–º—è: {new Date().toLocaleTimeString()}</div>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="max-w-2xl mx-auto">
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
      <div className="mb-6">
        <div className="flex justify-between text-xs text-gray-500 mb-2">
          <span className={currentStep === 'found' ? 'text-green-600 font-medium' : ''}>–ù–∞–π–¥–µ–Ω</span>
          <span className={currentStep === 'retrieving' ? 'text-blue-600 font-medium' : ''}>–ü–æ–ª—É—á–µ–Ω–∏–µ</span>
          <span className={currentStep === 'checking' ? 'text-orange-600 font-medium' : ''}>–ü—Ä–æ–≤–µ—Ä–∫–∞</span>
          <span className={currentStep === 'payment' ? 'text-green-600 font-medium' : ''}>–û–ø–ª–∞—Ç–∞</span>
          <span className={currentStep === 'completed' ? 'text-purple-600 font-medium' : ''}>–ó–∞–≤–µ—Ä—à–µ–Ω</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-gradient-to-r from-green-400 to-purple-500 h-2 rounded-full transition-all duration-500"
            style={{
              width: `${
                currentStep === 'found' ? '20%' :
                currentStep === 'retrieving' ? '40%' :
                currentStep === 'scanning' ? '50%' :
                currentStep === 'checking' ? '60%' :
                currentStep === 'payment' ? '80%' :
                currentStep === 'completed' ? '100%' : '0%'
              }`
            }}
          />
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      {renderStep()}

      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã */}
      {currentStep !== 'completed' && (
        <div className="mt-6 text-center">
          <Button 
            onClick={handleCancel}
            variant="outline"
            className="text-red-600 border-red-300 hover:bg-red-50"
          >
            <Icon name="X" size={16} className="mr-2" />
            –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
          </Button>
        </div>
      )}
    </div>
  );
};

export default WBOrderProcessor;