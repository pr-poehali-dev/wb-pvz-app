import { useState } from 'react';
import { categorizeAudioFiles, getFunctionDisplayName, type AudioMapping } from '@/utils/audioRecognition';

export interface ProcessedFile {
  file: File;
  mapping: AudioMapping;
  status: 'pending' | 'uploaded' | 'failed';
  displayName: string;
}

export const useAudioUploader = () => {
  const [uploadStatus, setUploadStatus] = useState<Record<string, 'pending' | 'uploaded'>>({});
  const [processedFiles, setProcessedFiles] = useState<ProcessedFile[]>([]);
  const [unrecognizedFiles, setUnrecognizedFiles] = useState<File[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showCloudLoader, setShowCloudLoader] = useState(false);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
  const saveAudioFile = async (processedFile: ProcessedFile): Promise<void> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = () => {
        try {
          const base64 = reader.result as string;
          let storageKey: string;
          
          if (processedFile.mapping.type === 'cell') {
            storageKey = `audio_cells_${processedFile.mapping.cellNumber}`;
          } else {
            storageKey = `audio_${processedFile.mapping.type}`;
          }
          
          localStorage.setItem(storageKey, base64);
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω: ${processedFile.file.name} -> ${storageKey}`);
          resolve();
        } catch (error) {
          reject(error);
        }
      };
      
      reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      reader.readAsDataURL(processedFile.file);
    });
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π –ø–∞–ø–∫–∏ —Å –∞—É–¥–∏–æ
  const handleBulkUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    setIsProcessing(true);
    console.log(`üìÅ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${files.length} —Ñ–∞–π–ª–æ–≤`);

    const { recognized, unrecognized } = categorizeAudioFiles(Array.from(files));
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const processed: ProcessedFile[] = recognized.map(({ file, mapping }) => ({
      file,
      mapping,
      status: 'pending' as const,
      displayName: getFunctionDisplayName(
        mapping.type,
        mapping.cellNumber
      )
    }));

    setProcessedFiles(processed);
    setUnrecognizedFiles(unrecognized);

    console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${recognized.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`‚ùì –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${unrecognized.length} —Ñ–∞–π–ª–æ–≤`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    let uploadedCount = 0;
    for (const processedFile of processed) {
      try {
        await saveAudioFile(processedFile);
        uploadedCount++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
        setProcessedFiles(prev => 
          prev.map(pf => 
            pf.file === processedFile.file 
              ? { ...pf, status: 'uploaded' }
              : pf
          )
        );
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${processedFile.file.name}:`, error);
        setProcessedFiles(prev => 
          prev.map(pf => 
            pf.file === processedFile.file 
              ? { ...pf, status: 'failed' }
              : pf
          )
        );
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    const newStatus = { ...uploadStatus };
    if (recognized.some(r => r.mapping.type === 'discount')) newStatus['discount'] = 'uploaded';
    if (recognized.some(r => r.mapping.type === 'camera')) newStatus['camera'] = 'uploaded';
    if (recognized.some(r => r.mapping.type === 'rate')) newStatus['rate'] = 'uploaded';
    
    const cellFiles = recognized.filter(r => r.mapping.type === 'cell');
    if (cellFiles.length > 0) newStatus['cells_folder'] = 'uploaded';
    
    setUploadStatus(newStatus);
    setIsProcessing(false);
    
    console.log(`üéâ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${uploadedCount}/${processed.length}`);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —É–∂–µ –µ—Å—Ç—å
  const checkExistingFiles = () => {
    const newStatus: Record<string, 'pending' | 'uploaded'> = {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    const basicFiles = ['discount', 'camera', 'rate'];
    basicFiles.forEach(fileType => {
      if (localStorage.getItem(`audio_${fileType}`)) {
        newStatus[fileType] = 'uploaded';
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —è—á–µ–µ–∫
    let cellsCount = 0;
    for (let i = 1; i <= 100; i++) {
      if (localStorage.getItem(`audio_cells_${i}`)) {
        cellsCount++;
      }
    }
    
    if (cellsCount > 0) {
      newStatus['cells_folder'] = 'uploaded';
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${cellsCount} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫`);
    }
    
    setUploadStatus(newStatus);
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  const clearAllAudio = () => {
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('audio_')) {
        localStorage.removeItem(key);
      }
    });
    setUploadStatus({});
    setProcessedFiles([]);
    setUnrecognizedFiles([]);
    console.log('üóëÔ∏è –í—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
  };

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  const runDiagnostics = () => {
    console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û–§–ê–ô–õ–û–í ===');
    const audioKeys = Object.keys(localStorage).filter(key => key.startsWith('audio_'));
    console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${audioKeys.length}`);
    audioKeys.forEach(key => {
      const value = localStorage.getItem(key);
      console.log(`üìÅ ${key}: ${value ? `${(value.length / 1024).toFixed(1)}KB` : 'null'}`);
    });
    console.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –æ–±–ª–∞–∫–∞
  const updateStatusAfterCloudLoad = () => {
    const newStatus: Record<string, 'pending' | 'uploaded'> = {};
    ['discount', 'camera', 'rate'].forEach(type => {
      if (localStorage.getItem(`audio_${type}`)) {
        newStatus[type] = 'uploaded';
      }
    });
    if (localStorage.getItem('audio_cells_1')) {
      newStatus['cells_folder'] = 'uploaded';
    }
    setUploadStatus(newStatus);
  };

  return {
    uploadStatus,
    processedFiles,
    unrecognizedFiles,
    isProcessing,
    showCloudLoader,
    setShowCloudLoader,
    handleBulkUpload,
    checkExistingFiles,
    clearAllAudio,
    runDiagnostics,
    updateStatusAfterCloudLoad
  };
};