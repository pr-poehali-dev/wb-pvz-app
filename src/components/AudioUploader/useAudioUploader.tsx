import { useState } from 'react';

export interface ProcessedFile {
  file: File;
  functionType?: string;
  cellNumber?: number;
  status: 'pending' | 'uploaded' | 'failed' | 'skipped';
  displayName?: string;
}

export const useAudioUploader = () => {
  const [uploadStatus, setUploadStatus] = useState<Record<string, 'pending' | 'uploaded'>>({});
  const [audioFiles, setAudioFiles] = useState<File[]>([]);
  const [currentFileIndex, setCurrentFileIndex] = useState(0);
  const [processedFiles, setProcessedFiles] = useState<ProcessedFile[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showCloudLoader, setShowCloudLoader] = useState(false);
  const [showAudioPlayer, setShowAudioPlayer] = useState(false);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
  const saveAudioFile = async (file: File, functionType: string, cellNumber?: number): Promise<void> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = () => {
        try {
          const base64 = reader.result as string;
          let storageKey: string;
          let displayName: string;
          
          if (functionType === 'cell' && cellNumber) {
            storageKey = `audio_cells_${cellNumber}`;
            displayName = `–Ø—á–µ–π–∫–∞ ${cellNumber}`;
          } else {
            storageKey = `audio_${functionType}`;
            switch (functionType) {
              case 'discount':
                displayName = '–°–∫–∏–¥–∫–∏/–ö–æ—à–µ–ª—ë–∫';
                break;
              case 'camera':
                displayName = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π';
                break;
              case 'rate':
                displayName = '–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';
                break;
              default:
                displayName = functionType;
            }
          }
          
          localStorage.setItem(storageKey, base64);
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω: ${file.name} -> ${displayName}`);
          resolve();
        } catch (error) {
          reject(error);
        }
      };
      
      reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      reader.readAsDataURL(file);
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  const handleBulkUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    const audioFilesList = Array.from(files).filter(file => file.type.startsWith('audio/'));
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${audioFilesList.length} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è`);

    setAudioFiles(audioFilesList);
    setCurrentFileIndex(0);
    setProcessedFiles(audioFilesList.map(file => ({ 
      file, 
      status: 'pending' as const 
    })));
    
    if (audioFilesList.length > 0) {
      setShowAudioPlayer(true);
    }
  };

  // –ü—Ä–∏–≤—è–∑–∫–∞ –∞—É–¥–∏–æ –∫ —Ñ—É–Ω–∫—Ü–∏–∏
  const assignAudioToFunction = async (functionType: string, cellNumber?: number) => {
    if (currentFileIndex >= audioFiles.length) return;
    
    const currentFile = audioFiles[currentFileIndex];
    setIsProcessing(true);

    try {
      await saveAudioFile(currentFile, functionType, cellNumber);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
      setProcessedFiles(prev =>
        prev.map((pf, index) =>
          index === currentFileIndex
            ? { 
                ...pf, 
                status: 'uploaded' as const, 
                functionType, 
                cellNumber,
                displayName: cellNumber ? `–Ø—á–µ–π–∫–∞ ${cellNumber}` : getFunctionDisplayName(functionType)
              }
            : pf
        )
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const newStatus = { ...uploadStatus };
      if (functionType === 'cell') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —è—á–µ–π–∫–∞
        const hasAnyCells = Object.keys(localStorage).some(key => key.startsWith('audio_cells_'));
        if (hasAnyCells) newStatus['cells_folder'] = 'uploaded';
      } else {
        newStatus[functionType] = 'uploaded';
      }
      setUploadStatus(newStatus);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É
      moveToNextFile();
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${currentFile.name}:`, error);
      setProcessedFiles(prev =>
        prev.map((pf, index) =>
          index === currentFileIndex ? { ...pf, status: 'failed' as const } : pf
        )
      );
    } finally {
      setIsProcessing(false);
    }
  };

  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
  const skipCurrentFile = () => {
    setProcessedFiles(prev =>
      prev.map((pf, index) =>
        index === currentFileIndex ? { ...pf, status: 'skipped' as const } : pf
      )
    );
    moveToNextFile();
  };

  // –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É
  const moveToNextFile = () => {
    const nextIndex = currentFileIndex + 1;
    if (nextIndex >= audioFiles.length) {
      // –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
      setShowAudioPlayer(false);
      console.log('üéâ –í—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
    } else {
      setCurrentFileIndex(nextIndex);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const getFunctionDisplayName = (functionType: string): string => {
    switch (functionType) {
      case 'discount': return '–°–∫–∏–¥–∫–∏/–ö–æ—à–µ–ª—ë–∫';
      case 'camera': return '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –∫–∞–º–µ—Ä–æ–π';
      case 'rate': return '–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';
      default: return functionType;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —É–∂–µ –µ—Å—Ç—å
  const checkExistingFiles = () => {
    const newStatus: Record<string, 'pending' | 'uploaded'> = {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    const basicFiles = ['discount', 'camera', 'rate'];
    basicFiles.forEach(fileType => {
      if (localStorage.getItem(`audio_${fileType}`)) {
        newStatus[fileType] = 'uploaded';
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —è—á–µ–µ–∫
    let cellsCount = 0;
    for (let i = 1; i <= 100; i++) {
      if (localStorage.getItem(`audio_cells_${i}`)) {
        cellsCount++;
      }
    }
    
    if (cellsCount > 0) {
      newStatus['cells_folder'] = 'uploaded';
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${cellsCount} —Ñ–∞–π–ª–æ–≤ —è—á–µ–µ–∫`);
    }
    
    setUploadStatus(newStatus);
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  const clearAllAudio = () => {
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('audio_')) {
        localStorage.removeItem(key);
      }
    });
    setUploadStatus({});
    setProcessedFiles([]);
    setAudioFiles([]);
    setCurrentFileIndex(0);
    setShowAudioPlayer(false);
    console.log('üóëÔ∏è –í—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
  };

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  const runDiagnostics = () => {
    console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–£–î–ò–û–§–ê–ô–õ–û–í ===');
    const audioKeys = Object.keys(localStorage).filter(key => key.startsWith('audio_'));
    console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${audioKeys.length}`);
    audioKeys.forEach(key => {
      const value = localStorage.getItem(key);
      console.log(`üìÅ ${key}: ${value ? `${(value.length / 1024).toFixed(1)}KB` : 'null'}`);
    });
    console.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –æ–±–ª–∞–∫–∞
  const updateStatusAfterCloudLoad = () => {
    const newStatus: Record<string, 'pending' | 'uploaded'> = {};
    ['discount', 'camera', 'rate'].forEach(type => {
      if (localStorage.getItem(`audio_${type}`)) {
        newStatus[type] = 'uploaded';
      }
    });
    if (localStorage.getItem('audio_cells_1')) {
      newStatus['cells_folder'] = 'uploaded';
    }
    setUploadStatus(newStatus);
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
  const getCurrentFile = (): File | null => {
    return audioFiles[currentFileIndex] || null;
  };

  return {
    uploadStatus,
    processedFiles,
    audioFiles,
    currentFileIndex,
    isProcessing,
    showCloudLoader,
    showAudioPlayer,
    setShowCloudLoader,
    setShowAudioPlayer,
    handleBulkUpload,
    assignAudioToFunction,
    skipCurrentFile,
    getCurrentFile,
    checkExistingFiles,
    clearAllAudio,
    runDiagnostics,
    updateStatusAfterCloudLoad
  };
};